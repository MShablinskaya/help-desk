Index: src/main/java/com/innowise/training/shablinskaya/helpdesk/service/impl/TicketServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.innowise.training.shablinskaya.helpdesk.service.impl;\n\nimport com.innowise.training.shablinskaya.helpdesk.converter.TicketConverter;\nimport com.innowise.training.shablinskaya.helpdesk.converter.UserConverter;\nimport com.innowise.training.shablinskaya.helpdesk.dto.TicketDto;\nimport com.innowise.training.shablinskaya.helpdesk.entity.Ticket;\nimport com.innowise.training.shablinskaya.helpdesk.entity.User;\nimport com.innowise.training.shablinskaya.helpdesk.enums.Action;\nimport com.innowise.training.shablinskaya.helpdesk.enums.Role;\nimport com.innowise.training.shablinskaya.helpdesk.enums.State;\nimport com.innowise.training.shablinskaya.helpdesk.exception.TicketStateException;\nimport com.innowise.training.shablinskaya.helpdesk.repository.TicketRepository;\nimport com.innowise.training.shablinskaya.helpdesk.service.EmailService;\nimport com.innowise.training.shablinskaya.helpdesk.service.HistoryService;\nimport com.innowise.training.shablinskaya.helpdesk.service.TicketService;\nimport com.innowise.training.shablinskaya.helpdesk.service.UserService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport javax.persistence.EntityNotFoundException;\nimport java.sql.Timestamp;\nimport java.time.Instant;\nimport java.time.LocalDate;\nimport java.util.*;\nimport java.util.stream.Collectors;\nimport java.util.stream.Stream;\n\n@Service\npublic class TicketServiceImpl implements TicketService {\n    private static final String DRAFT = \"DRAFT\";\n    private static final String NEW = \"NEW\";\n    private static final String APPROVED = \"APPROVED\";\n    private static final String DECLINED = \"DECLINED\";\n    private static final String CANCELLED = \"CANCELLED\";\n    private static final String IN_PROGRESS = \"IN_PROGRESS\";\n    private static final String DONE = \"DONE\";\n    private static final String EMPLOYEE = \"EMPLOYEE\";\n    private static final String MANAGER = \"MANAGER\";\n    private static final String ENGINEER = \"ENGINEER\";\n\n\n    private final TicketRepository ticketRepository;\n    private final TicketConverter ticketConverter;\n    private final UserService userService;\n    private final UserConverter userConverter;\n    private final EmailService emailService;\n    private final HistoryService historyService;\n\n\n    @Autowired\n    public TicketServiceImpl(TicketRepository ticketRepository,\n                             TicketConverter ticketConverter,\n                             UserService userService,\n                             UserConverter userConverter,\n                             EmailService emailService,\n                             HistoryService historyService) {\n        this.ticketRepository = ticketRepository;\n        this.ticketConverter = ticketConverter;\n        this.userService = userService;\n        this.userConverter = userConverter;\n        this.emailService = emailService;\n        this.historyService = historyService;\n    }\n\n    @Override\n    public TicketDto findById(Long id) {\n        return ticketConverter.toDto(ticketRepository.getById(id).orElseThrow(EntityNotFoundException::new));\n    }\n\n    @Override\n    public List<TicketDto> findByCurrentUser() {\n        User user = userService.getCurrentUser();\n        if (user.getRoleId().name().equals(EMPLOYEE) || user.getRoleId().name().equals(MANAGER)) {\n            List<TicketDto> ticketDtoList = new ArrayList<>(findByOwner());\n            return ticketDtoList.stream().map(ticketDto -> {\n                ticketDto.setActions(findAllowedActionsByRole(ticketDto.getId()));\n                return ticketDto;\n            }).collect(Collectors.toList());\n        } else {\n            List<TicketDto> ticketDtoList = new ArrayList<>(findByAssignee());\n            return ticketDtoList.stream().map(ticketDto -> {\n                ticketDto.setActions(findAllowedActionsByRole(ticketDto.getId()));\n                return ticketDto;\n            }).collect(Collectors.toList());\n        }\n    }\n\n    @Override\n    public List<TicketDto> setActionToTicketDto() throws TicketStateException {\n        List<TicketDto> ticketDtoList = new ArrayList<>(findAllTicketsByRole());\n\n        return ticketDtoList.stream().map(ticketDto -> {\n            ticketDto.setActions(findAllowedActionsByRole(ticketDto.getId()));\n            return ticketDto;\n        }).collect(Collectors.toList());\n    }\n\n    @Override\n    public List<TicketDto> findAllTicketsByRole() throws TicketStateException {\n        User user = userService.getCurrentUser();\n        if (user != null) {\n            if (user.getRoleId().name().equals(EMPLOYEE)) {\n                return findByOwner();\n            } else if (user.getRoleId().name().equals(MANAGER)) {\n                Set<TicketDto> managersAllTicketsSet = new LinkedHashSet<>(findByOwner());\n                managersAllTicketsSet.addAll(findByState(State.NEW));\n                List<TicketDto> managersAllTickets = new ArrayList<>(managersAllTicketsSet);\n                managersAllTickets.addAll(findByApprove());\n\n                return managersAllTickets;\n            } else if (user.getRoleId().name().equals(ENGINEER)) {\n\n                return Stream.of(findByState(State.APPROVED), findByAssignee())\n                        .flatMap(Collection::stream)\n                        .collect(Collectors.toList());\n            } else {\n                throw new TicketStateException(\"Oops, something going wrong!\");\n            }\n        } else {\n            throw new TicketStateException(\"User not found!\");\n        }\n    }\n\n    @Transactional\n    @Override\n    public TicketDto postNewTicket(String action, TicketDto ticketDto) throws TicketStateException {\n        if (ticketDto != null && action != null) {\n            if (action.equalsIgnoreCase(Action.DRAFT.name())) {\n                ticketDto.setState(DRAFT);\n                Ticket ticket = save(ticketDto);\n\n                historyService.recordHistory(ticket);\n                TicketDto dto = ticketConverter.toDto(ticket);\n                dto.setActions(findAllowedActionsByRole(dto.getId()));\n                return dto;\n            } else if (action.equalsIgnoreCase(Action.SUBMIT.name())) {\n                ticketDto.setState(NEW);\n                Ticket ticket = save(ticketDto);\n\n                historyService.recordHistoryForPostedTicket(ticket);\n                emailService.sendAllManagerMessage(ticketDto);\n\n                return ticketConverter.toDto(ticket);\n\n            } else {\n                throw new TicketStateException(\"Unacceptable action!\");\n            }\n        } else {\n            throw new TicketStateException(\"Oops! Something going wrong. Chek your request.\");\n        }\n    }\n\n    @Transactional\n    @Override\n    public Ticket save(TicketDto dto) throws TicketStateException {\n        Timestamp now = Timestamp.from(Instant.now());\n        LocalDate currentDate = now.toLocalDateTime().toLocalDate();\n\n        Timestamp setTime = dto.getResolutionDate();\n        LocalDate resolutionDate = setTime.toLocalDateTime().toLocalDate();\n        if (currentDate.compareTo(resolutionDate) <= 0) {\n            return ticketRepository.create(ticketConverter.toEntity(dto));\n        } else {\n            throw new EntityNotFoundException(\"Ticket does not create!\");\n        }\n    }\n\n    @Override\n    @Transactional\n    public TicketDto editTicket(String action, TicketDto ticketDto) throws TicketStateException {\n        if (ticketDto.getId() != null && ticketDto.getOwner().getEmail().equals(userService.getCurrentUser().getEmail())\n                && ticketDto.getState().equals(DRAFT) || ticketDto.getState().equals(DECLINED)) {\n            if (action.equalsIgnoreCase(Action.SUBMIT.name())) {\n                ticketDto = ticketConverter.toDto(changeState(ticketDto.getId(), Action.SUBMIT.name()));\n                Ticket ticket = ticketConverter.toUpdEntity(ticketDto);\n                historyService.recordHistoryForEditedTicket(ticket);\n                return ticketConverter.toDto(ticketRepository.update(ticket));\n            } else if (action.equalsIgnoreCase(Action.DRAFT.name())) {\n                Ticket ticket = ticketConverter.toUpdEntity(ticketDto);\n                historyService.recordHistoryForEditedTicket(ticket);\n                return ticketConverter.toDto(ticketRepository.update(ticket));\n            } else {\n                throw new TicketStateException(\"Incorrect action!\");\n            }\n        } else {\n            throw new TicketStateException(\"You can't edit this Ticket anymore!\");\n        }\n\n    }\n\n    @Transactional\n    @Override\n    public Ticket changeState(Long id, String action) throws TicketStateException {\n        User user = userService.getCurrentUser();\n        TicketDto dto = ticketConverter.toDto(ticketRepository.getById(id).orElseThrow(EntityNotFoundException::new));\n//        char replaceCharacter = '_';\n//        action = action.replace(' ', replaceCharacter);\n        Action inputAction = Action.valueOf(action.toUpperCase());\n        String state = inputAction.getAction();\n        if (dto != null && state != null) {\n            if (dto.getState().equals(DRAFT) || dto.getState().equals(DECLINED) &&\n                    (user.getRoleId().equals(Role.EMPLOYEE) || user.getRoleId().equals(Role.MANAGER))) {\n                changeStateFromDraft(dto, State.valueOf(state));\n                historyService.recordHistory(ticketConverter.toUpdEntity(dto));\n                emailService.sendAllManagerMessage(dto);\n                return ticketRepository.update(ticketConverter.toUpdEntity(dto));\n\n            } else if (dto.getState().equals(NEW) && user.getRoleId().equals(Role.MANAGER)) {\n                changeStateFromNew(dto, State.valueOf(state));\n                historyService.recordHistory(ticketConverter.toUpdEntity(dto));\n                emailService.sendEmailsForNewTickets(dto);\n                return ticketRepository.update(ticketConverter.toUpdEntity(dto));\n\n            } else if (dto.getState().equals(APPROVED) && user.getRoleId().equals(Role.ENGINEER)) {\n                changeStateFromApprove(dto, State.valueOf(state));\n                historyService.recordHistory(ticketConverter.toUpdEntity(dto));\n                emailService.sendApproveMessage(dto);\n                return ticketRepository.update(ticketConverter.toUpdEntity(dto));\n\n            } else if (dto.getState().equals(IN_PROGRESS) && user.getRoleId().equals(Role.ENGINEER)) {\n                changeStateFromInProgress(dto, State.valueOf(state));\n                historyService.recordHistory(ticketConverter.toUpdEntity(dto));\n                emailService.sendCreatorMessage(dto);\n                return ticketRepository.update(ticketConverter.toUpdEntity(dto));\n            }\n        }\n        throw new TicketStateException(\"Something wrong. Chek your request and/or your access rights!\");\n    }\n\n    @Override\n    public List<String> findAllowedActionsByRole(Long id) {\n        List<String> actionsList = new ArrayList<>();\n        TicketDto dto = findById(id);\n        if (dto != null) {\n            if (userService.getCurrentUser().getRoleId().name().equals(EMPLOYEE)\n                    || userService.getCurrentUser().getRoleId().name().equals(MANAGER)\n                    && dto.getOwner().getEmail().equals(userService.getCurrentUser().getEmail())) {\n                if (dto.getState().equals(DRAFT) || dto.getState().equals(DECLINED)) {\n                    actionsList.add(Action.SUBMIT.name());\n                    actionsList.add(Action.EDIT.getAction());\n                    actionsList.add(Action.CANCEL.name());\n\n                    return actionsList;\n                } else if (dto.getState().equals(DONE)) {\n                    actionsList.add(Action.LEAVE_FEEDBACK.getAction());\n\n                    return actionsList;\n                } else {\n                    actionsList.add(\"No active actions...\");\n\n                    return actionsList;\n                }\n            } else if (userService.getCurrentUser().getRoleId().name().equals(MANAGER)) {\n                if (!dto.getOwner().getEmail().equals(userService.getCurrentUser().getEmail()) && dto.getState().equals(NEW)) {\n                    actionsList.add(Action.APPROVE.name());\n                    actionsList.add(Action.DECLINE.name());\n                    actionsList.add(Action.CANCEL.name());\n\n                } else {\n                    actionsList.add(\"No active actions...\");\n\n                }\n                return actionsList;\n            } else if (userService.getCurrentUser().getRoleId().name().equals(ENGINEER)) {\n                if (dto.getState().equals(APPROVED)) {\n                    actionsList.add(Action.ASSIGN.name());\n                    actionsList.add(Action.CANCEL.name());\n\n                    return actionsList;\n                } else if (dto.getState().equals(IN_PROGRESS)\n                        && dto.getAssignee().getEmail().equals(userService.getCurrentUser().getEmail())) {\n                    actionsList.add(Action.DONE.name());\n\n                    return actionsList;\n                } else {\n                    actionsList.add(\"No active actions...\");\n\n                    return actionsList;\n                }\n            }\n        } else {\n            throw new EntityNotFoundException(\"Ticket doesn't exist!\");\n        }\n\n        return actionsList;\n    }\n\n    private void changeStateFromDraft(TicketDto dto, State state) throws TicketStateException {\n        if (dto.getOwner().getEmail().equals(userService.getCurrentUser().getEmail())) {\n            if (!state.name().equalsIgnoreCase(dto.getState())) {\n                if (state.name().equalsIgnoreCase(NEW) || state.name().equalsIgnoreCase(CANCELLED)) {\n                    dto.setState(state.name());\n                } else {\n                    throw new TicketStateException(\"You can't use it for Draft Ticket!\");\n                }\n            } else {\n                throw new TicketStateException(\"It's nothing to change!\");\n            }\n        } else {\n            throw new TicketStateException(\"You don't own this ticket!\");\n        }\n    }\n\n\n    private void changeStateFromNew(TicketDto dto, State state) throws TicketStateException {\n        if (!dto.getOwner().getEmail().equals(userService.getCurrentUser().getEmail())) {\n            if (!state.name().equals(dto.getState())) {\n                if (state.name().equalsIgnoreCase(APPROVED) || state.name().equalsIgnoreCase(DECLINED) || state.name().equalsIgnoreCase(CANCELLED)) {\n                    dto.setState(state.name());\n                    dto.setApprove(userConverter.toDto(userService.getCurrentUser()));\n                } else {\n                    throw new TicketStateException(\"You can't use it for New Ticket!\");\n                }\n            } else {\n                throw new TicketStateException(\"It's nothing to change!\");\n            }\n        } else {\n            throw new TicketStateException(\"You can't approve your own Ticket\");\n        }\n    }\n\n\n    private void changeStateFromApprove(TicketDto dto, State state) throws TicketStateException {\n        if (!state.name().equals(dto.getState())) {\n            if (state.name().equalsIgnoreCase(IN_PROGRESS) || state.name().equalsIgnoreCase(CANCELLED)) {\n                dto.setState(state.name());\n                dto.setAssignee(userConverter.toDto(userService.getCurrentUser()));\n            } else {\n                throw new TicketStateException(\"You can't use it for Approved Ticket!\");\n            }\n        } else {\n            throw new TicketStateException(\"It's nothing to change!\");\n        }\n    }\n\n\n    private void changeStateFromInProgress(TicketDto dto, State state) throws TicketStateException {\n        if (!state.name().equals(dto.getState())) {\n            if (state.name().equalsIgnoreCase(DONE) || state.name().equalsIgnoreCase(CANCELLED)\n                    && dto.getAssignee().getEmail().equals(userService.getCurrentUser().getEmail())) {\n                dto.setState(state.name());\n                dto.setAssignee(userConverter.toDto(userService.getCurrentUser()));\n            } else {\n                throw new TicketStateException(\"You can't use it for In Progress Ticket!\");\n            }\n        } else {\n            throw new TicketStateException(\"It's nothing to change!\");\n        }\n\n    }\n\n    private List<TicketDto> findByOwner() {\n        User user = userService.getCurrentUser();\n        List<Ticket> tickets = ticketRepository.getByOwnerId(user.getId());\n\n        List<TicketDto> ticketDtos = new ArrayList<>();\n\n        if (tickets != null) {\n            tickets.forEach(ticket -> ticketDtos.add(ticketConverter.toDto(ticket)));\n        }\n\n        return ticketDtos;\n    }\n\n    private List<TicketDto> findByApprove() {\n        User user = userService.getCurrentUser();\n        List<Ticket> tickets = ticketRepository.getByApproveId(user.getId());\n\n        List<TicketDto> ticketDtos = new ArrayList<>();\n\n        if (tickets != null) {\n            tickets.forEach(ticket -> ticketDtos.add(ticketConverter.toDto(ticket)));\n        }\n        return ticketDtos;\n    }\n\n    private List<TicketDto> findByAssignee() {\n        User user = userService.getCurrentUser();\n        List<Ticket> tickets = ticketRepository.getByAssigneeId(user.getId());\n\n        List<TicketDto> ticketDtos = new ArrayList<>();\n\n        if (tickets != null) {\n            tickets.forEach(ticket -> ticketDtos.add(ticketConverter.toDto(ticket)));\n        }\n        return ticketDtos;\n    }\n\n    private List<TicketDto> findByState(State state) {\n\n        List<Ticket> tickets = ticketRepository.getByState(state);\n\n        List<TicketDto> ticketDtos = new ArrayList<>();\n\n        if (tickets != null) {\n            tickets.forEach(ticket -> ticketDtos.add(ticketConverter.toDto(ticket)));\n        }\n        return ticketDtos;\n    }\n\n}\n\n\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/innowise/training/shablinskaya/helpdesk/service/impl/TicketServiceImpl.java b/src/main/java/com/innowise/training/shablinskaya/helpdesk/service/impl/TicketServiceImpl.java
--- a/src/main/java/com/innowise/training/shablinskaya/helpdesk/service/impl/TicketServiceImpl.java	
+++ b/src/main/java/com/innowise/training/shablinskaya/helpdesk/service/impl/TicketServiceImpl.java	
@@ -194,8 +194,6 @@
     public Ticket changeState(Long id, String action) throws TicketStateException {
         User user = userService.getCurrentUser();
         TicketDto dto = ticketConverter.toDto(ticketRepository.getById(id).orElseThrow(EntityNotFoundException::new));
-//        char replaceCharacter = '_';
-//        action = action.replace(' ', replaceCharacter);
         Action inputAction = Action.valueOf(action.toUpperCase());
         String state = inputAction.getAction();
         if (dto != null && state != null) {
