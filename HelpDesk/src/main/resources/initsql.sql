DROP TABLE IF EXISTS PUBLIC.COMMENT;

DROP TABLE IF EXISTS PUBLIC.FEEDBACK;

DROP TABLE IF EXISTS PUBLIC.HISTORY;

DROP TABLE IF EXISTS PUBLIC.ATTACHMENT;

DROP TABLE IF EXISTS PUBLIC.TICKET;

DROP TABLE IF EXISTS PUBLIC.USER;

DROP TABLE IF EXISTS PUBLIC.CATEGORY;
/*CREATE TABLE IF NOT EXISTS проще))*/
CREATE TABLE PUBLIC.CATEGORY
(
    ID   INT          NOT NULL AUTO_INCREMENT,
    NAME VARCHAR(255) NOT NULL,
    CONSTRAINT CATEGORY_PRIMARY_KEY PRIMARY KEY (ID)
);

CREATE TABLE PUBLIC.USER
(
    ID         INT          NOT NULL AUTO_INCREMENT,
    FIRST_NAME VARCHAR(255) NOT NULL,
    LAST_NAME  VARCHAR(255) NOT NULL,
    ROLE_ID    ENUM ('employee',
        'manager',
        'engineer')         NOT NULL,
    EMAIL      VARCHAR(255) NOT NULL,
    PASSWORD   VARCHAR(255) NOT NULL,
    CONSTRAINT USER_PRIMARY_KEY PRIMARY KEY (ID)
);

CREATE TABLE PUBLIC.TICKET
(
    ID                      INT          NOT NULL AUTO_INCREMENT,
    NAME                    VARCHAR(255) NOT NULL,
    DESCRIPTION             VARCHAR(255) NOT NULL,
    CREATED_ON              DATETIME     NOT NULL,
    DESIRED_RESOLUTION_DATE DATE         NOT NULL,
    ASSIGNEE_ID             INTEGER      NOT NULL,
    OWNER_ID                INT          NOT NULL,
    STATE_ID                ENUM ('draft',
        'new',
        'approved',
        'declined',
        'in progress',
        'done',
        'canceled')                      NOT NULL,
    CATEGORY_ID             INTEGER      NOT NULL,
    URGENCY_ID              ENUM ('critical',
        'high',
        'average',
        'low')                           NOT NULL,
    APPROVE_ID              INT          NOT NULL,
    CONSTRAINT TICKET_PRIMARY_KEY PRIMARY KEY (ID),
    CONSTRAINT ASSIGNEE_ID_FOREIGN_KEY FOREIGN KEY (ASSIGNEE_ID) REFERENCES USER (ID),
    CONSTRAINT OWNER_ID_FOREIGN_KEY FOREIGN KEY (OWNER_ID) REFERENCES USER (ID),
    CONSTRAINT APPROVE_ID_FOREIGN_KEY FOREIGN KEY (APPROVE_ID) REFERENCES USER(ID),
    CONSTRAINT CATEGORY_FOREIGN_KEY FOREIGN KEY (CATEGORY_ID) REFERENCES CATEGORY (ID)

);


CREATE TABLE PUBLIC.ATTACHMENT
(
    ID        INTEGER      NOT NULL AUTO_INCREMENT,
    BLOB      BLOB,
    TICKET_ID INTEGER      NOT NULL,
    NAME      VARCHAR(255) NOT NULL,
    CONSTRAINT ATTACHMENT_PRIMARY_KEY PRIMARY KEY (ID),
    CONSTRAINT TICKET_FOREIGN_KEY_ATTACHMENT FOREIGN KEY (TICKET_ID) REFERENCES TICKET (ID)
);

CREATE TABLE PUBLIC.HISTORY
(
    ID          INT          NOT NULL AUTO_INCREMENT,
    TICKET_ID   INT          NOT NULL,
    DATE        DATE         NOT NULL,
    ACTION      VARCHAR(255) NOT NULL,
    USER_ID     INTEGER      NOT NULL,
    DESCRIPTION VARCHAR(255) NOT NULL,
    CONSTRAINT HISTORY_PRIMARY_KEY PRIMARY KEY (ID),
    CONSTRAINT TICKET_FOREIGN_KEY_HISTORY FOREIGN KEY (TICKET_ID) REFERENCES TICKET (ID),
    CONSTRAINT USER_FOREIGN_KEY_HISTORY FOREIGN KEY (USER_ID) REFERENCES USER (ID)
);

CREATE TABLE PUBLIC.COMMENT
(
    ID        INT          NOT NULL AUTO_INCREMENT,
    USER_ID   INT          NOT NULL,
    TEXT      VARCHAR(255) NOT NULL,
    TICKET_ID INT          NOT NULL,
    CONSTRAINT COMMENT_PRIMARY_KEY PRIMARY KEY (ID),
    CONSTRAINT USER_FOREIGN_KEY_COMMENT FOREIGN KEY (USER_ID) REFERENCES USER (ID),
    CONSTRAINT TICKET_FOREIGN_KEY_COMMENT FOREIGN KEY (TICKET_ID) REFERENCES TICKET (ID)
);

CREATE TABLE PUBLIC.FEEDBACK
(
    ID        INT      NOT NULL AUTO_INCREMENT,
    USER_ID   INT      NOT NULL,
    RATE      INT      NOT NULL,
    DATE      DATE     NOT NULL,
    TEXT      LONGTEXT NOT NULL,
    TICKET_ID INTEGER  NOT NULL,
    CONSTRAINT FEEDBACK_PRIMARY_KEY PRIMARY KEY (ID),
    CONSTRAINT USER_FOREIGN_KEY_FEEDBACK FOREIGN KEY (USER_ID) REFERENCES USER (ID),
    CONSTRAINT TICKET_FOREIGN_KEY_FEEDBACK FOREIGN KEY (TICKET_ID) REFERENCES TICKET (ID)
);